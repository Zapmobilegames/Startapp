/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "startapp_autodefs.h"
#include "s3eEdk.h"
#include "startapp.h"
//Declarations of Init and Term functions
extern s3eResult startappInit();
extern void startappTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult initSDK_wrap(const char* DEV_ID, const char* APP_ID)
{
    IwTrace(STARTAPP_VERBOSE, ("calling startapp func on main thread: initSDK"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)initSDK, 2, DEV_ID, APP_ID);
}

static s3eResult Show_Ad_wrap()
{
    IwTrace(STARTAPP_VERBOSE, ("calling startapp func on main thread: Show_Ad"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Show_Ad, 0);
}

static s3eResult Show_SearchBox_wrap(bool show)
{
    IwTrace(STARTAPP_VERBOSE, ("calling startapp func on main thread: Show_SearchBox"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)Show_SearchBox, 1, show);
}

#define initSDK initSDK_wrap
#define Show_Ad Show_Ad_wrap
#define Show_SearchBox Show_SearchBox_wrap

#endif

void startappRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[3];
    funcPtrs[0] = (void*)initSDK;
    funcPtrs[1] = (void*)Show_Ad;
    funcPtrs[2] = (void*)Show_SearchBox;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[3] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("startapp", funcPtrs, sizeof(funcPtrs), flags, startappInit, startappTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int startappStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&startappRegisterExt;
    return 0;
}

int g_startappVal = startappStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    startappRegisterExt();
}
#endif

#endif
